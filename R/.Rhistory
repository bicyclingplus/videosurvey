geom_point(size=.5) +
#geom_line(aes(group=class)) +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2)+
facet_grid(scenario~road)+#, ncol = 3, strip.position = "top") +
theme_bw() +
coord_flip()+
ylab("Predicted proportion of responses")+
#ggtitle(paste("Collectors, ", model_name)) +
theme(strip.text = element_text(size = 8),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
ggplot( pred.plot, aes(comfort, Estimate)) +
geom_point(size=.5) +
#geom_line(aes(group=class)) +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2)+
facet_grid(scenario~road)+#, ncol = 3, strip.position = "top") +
theme_bw() +
coord_flip()+
ylab("Predicted proportion of responses")+
#ggtitle(paste("Collectors, ", model_name)) +
theme(strip.text = element_text(size = 8),
axis.title.y = element_blank())
ggsave(file.path("../IMG/minimum_infra_policy.png"),
width = 6.5, height = 5)
ggsave(file.path("../IMG/minimum_infra_policy.png"),
width = 6.5, height = 4)
ggplot( pred.plot, aes(comfort, Estimate)) +
geom_point(size=.7) +
#geom_line(aes(group=class)) +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2)+
facet_grid(scenario~road)+#, ncol = 3, strip.position = "top") +
theme_bw() +
coord_flip()+
ylab("Predicted proportion of responses")+
#ggtitle(paste("Collectors, ", model_name)) +
theme(strip.text = element_text(size = 8),
axis.title.y = element_blank())
ggsave(file.path("../IMG/minimum_infra_policy.png"),
width = 6.5, height = 4)
ggplot( pred.plot, aes(comfort, Estimate)) +
geom_point(size=.8) +
#geom_line(aes(group=class)) +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2)+
facet_grid(scenario~road)+#, ncol = 3, strip.position = "top") +
theme_bw() +
coord_flip()+
ylab("Predicted proportion of responses")+
#ggtitle(paste("Collectors, ", model_name)) +
theme(strip.text = element_text(size = 8),
axis.title.y = element_blank())
ggsave(file.path("../IMG/minimum_infra_policy.png"),
width = 6.5, height = 4)
names(d)
table(d$video_name,d$ID)
unique(d[,c("video_name","ID")])
unique(d[,c("video_name","ID","url")])
unique(d[,c("video_name","ID","URL")])
200*30
100000/15000
X
x
x = rbind(data.frame(c(bad_attitudes, low_ability_comfort, old_childless_female, collector_bad)),
data.frame(c(bad_attitudes, low_ability_comfort, old_childless_female, collector_mid)),
data.frame(c(bad_attitudes, low_ability_comfort, old_childless_female, collector_good)),
data.frame(c(bad_attitudes, low_ability_comfort, old_childless_female, arterial_bad)),
data.frame(c(bad_attitudes, low_ability_comfort, old_childless_female, arterial_mid)),
data.frame(c(bad_attitudes, low_ability_comfort, old_childless_female, arterial_good)))
x$class <- c("bad_attitude.low_comfort.collector_bad",
"bad_attitude.low_comfort.collector_mid",
"bad_attitude.low_comfort.collector_good",
"bad_attitude.low_comfort.arterial_bad",
"bad_attitude.low_comfort.arterial_mid",
"bad_attitude.low_comfort.arterial_good")
n=100
pred.cumsum <- array(0, dim = c(3, length(unique(x$class)), n))
for(i in 1:n){
pred <- predict(models$me_per_vid, newdata = x,summary=F,
allow_new_level=T, sample_new_levels="gaussian")
tmp <- apply(pred,2,table)
pred.cumsum[,,i] <- rbind(colSums(tmp[5:7,]),colSums(tmp[6:7,]),tmp[7,])
}
pred.cumsum <- apply(pred.cumsum,c(2,3),function(x) x/nrow(pred))
pred.mean <- apply(pred.cumsum,c(1,2),mean)
pred.PI <- apply(pred.cumsum,c(1,2),PI,prob=.95)
pred.plot <- data.frame(class=rep(x$class,each=3),
road = c(rep("collector",9),rep("arterial",9)),
scenario = rep(rep(c("poor","average","best"),each=3),2),
comfort = rep(c("At least slightly comfortable",
"At least moderatly comfortable",
"Very comfortable"),3),
Estimate = as.vector(pred.mean),
Q2.5 = as.vector(pred.PI[1,,]),
Q97.5 = as.vector(pred.PI[2,,]))
pred.plot$comfort <- factor(pred.plot$comfort, levels = c("At least slightly comfortable",
"At least moderatly comfortable",
"Very comfortable"))
pred.plot$scenario <- factor(pred.plot$scenario, levels = c("poor","average","best"))
ggplot( pred.plot, aes(comfort, Estimate)) +
geom_point(size=.8) +
#geom_line(aes(group=class)) +
geom_errorbar(aes(ymin = Q2.5, ymax = Q97.5), width = 0.2)+
facet_grid(scenario~road)+#, ncol = 3, strip.position = "top") +
theme_bw() +
coord_flip()+
ylab("Predicted proportion of responses")+
#ggtitle(paste("Collectors, ", model_name)) +
theme(strip.text = element_text(size = 8),
axis.title.y = element_blank())
ggsave(file.path("../IMG/minimum_infra_policy.png"),
width = 6.5, height = 4)
str(models)
length(models)
tmp = readRDS("summary_and_loo.RDS")
models_summary = tmp$models_summary
models_loo = tmp$models_loo
rm(tmp)
models_fixed = lapply(models_summary, "[[", "fixed")
models_fixed = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
return(x)
})
lapply(models_summary, function(x) {x$fixed$Eff.Sample})
str(x)
models_table = plyr::join_all(models_fixed, type = "left", by = "term")
rownames(models_table) = models_table$term
models_table
write.csv(models_table,"models_table.csv")
str(models_summary)
models_summary
models_fixed = lapply(models_summary, "[[", "fixed")
str(models_fixed)
names(models_summary)
names(models_summary[[1]])
names(models_summary[[1]]$random)
models_fixed = lapply(models_summary, "[[", c("fixed","group"))
models_group = lapply(models_summary, "[[", "group")
str(models_group)
str(models_fixed)
str(models_summary)
models_random = lapply(models_summary, "[[", "random")
str(models_random)
length(models_fixed)
length(models_roandom)
length(models_random)
models_fixed = lapply(models_summary, "[[", "fixed")
models_random = lapply(models_summary, "[[", "random")
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
names(x2) = paste0( names(models_random)[[i]], names(x2))
x2$term = rownames(x2)
return(rbind(x,x2))
})
str(x)
str(x2)
i=1
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
names(x2) = paste0( names(models_random)[[i]], names(x2))
x2$term = rownames(x2)
str(x2)
str(x)
rbind(x,x2)
models_fixed = lapply(models_summary, "[[", "fixed")
models_random = lapply(models_summary, "[[", "random")
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
names(x2) = paste0( names(models_random)[[i]], names(x2))
x2$term = rownames(x)
return(rbind(x,x2))
})
x = data.frame(models_fixed[[i]])
i
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
names(x2) = paste0( names(models_random)[[i]], names(x2))
x2$term = rownames(x)
names(x)
rownames(x)
rownames(x2)
models_fixed = lapply(models_summary, "[[", "fixed")
models_random = lapply(models_summary, "[[", "random")
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
names(x2) = paste0( names(models_random)[[i]], names(x))
x2$term = rownames(x2)
return(rbind(x,x2))
})
i
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
names(x2) = paste0( names(models_random)[[i]], names(x))
x2$term = rownames(x2)
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
str(x)
x2 = data.frame(models_random[[i]])
str(x2)
paste0( names(models_random)[[i]], names(x))
names(x2)
x2$term = rownames(x2)
names(x2) = paste0( names(models_random)[[i]], names(x))
models_fixed = lapply(models_summary, "[[", "fixed")
models_random = lapply(models_summary, "[[", "random")
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
x2$term = rownames(x2)
names(x2) = paste0( names(models_random)[[i]], names(x))
return(rbind(x,x2))
})
i=1
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
x2$term = rownames(x2)
names(x2) = paste0( names(models_random)[[i]], names(x))
str(x)
str(x2)
names(x2) = names(x)
str(x)
str(x2)
models_fixed = lapply(models_summary, "[[", "fixed")
models_random = lapply(models_summary, "[[", "random")
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
x2$term = rownames(x2)
names(x2) = names(x)
return(rbind(x,x2))
})
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
x2$term = rownames(x2)
names(x2) = names(x)
rbind(x,x2)
test<- rbind(x,x2)
str(test)
i
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
x2$term = rownames(x2)
names(x2) = names(x)
return(rbind(x,x2))
})
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
x2$term = rownames(x2)
names(x2) = names(x)
return(rbind(x,x2))
})
i=2
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
x2 = data.frame(models_random[[i]])
x2$term = rownames(x2)
names(x2) = names(x)
rbind(x,x2)
str(x)
str(x2)
x2 = data.frame(models_random[[i]])
x2
length(x2)
rownames(x2)
colnames(x2)
str(model_random[[2]])
str(models_random[[2]])
str(models_random[[1]])
str(models_fixed[[1]])
str(array(unlist(models_random[[2]])))
str(array(unlist(models_random[[2]])),dim=c(6,2))
x21 = data.frame(models_random[[i]][[1]])
x22 = data.frame(models_random[[i]][[2]])
str(x21)
x22
x2 = rbind(data.frame(models_random[[i]][[1]]),data.frame(models_random[[i]][[2]]))
STR(X2)
X2
x2
names(models_random)
str(models_random)
names(models_random[[i]])
rownames(x2)
x2$term = paste0("sd(",names(models_random[[i]]),")")
x2
x
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
str(x)
names(x2)
names(x)
names(x2) = names(x)
models_fixed = lapply(models_summary, "[[", "fixed")
models_random = lapply(models_summary, "[[", "random")
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
if(length(models_random[[i]])==2){
x2 = rbind(data.frame(models_random[[i]][[1]]),data.frame(models_random[[i]][[2]]))
}else{
x2 = data.frame(models_random[[i]])
}
x2$term = paste0("sd(",names(models_random[[i]]),")")
names(x2) = names(x)
return(rbind(x,x2))
})
str(models_out)
models_table = plyr::join_all(models_out, type = "left", by = "term")
rownames(models_table) = models_table$term
write.csv(models_table,"models_table.csv")
i=2
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
if(length(models_random[[i]])==2){
x2 = rbind(data.frame(models_random[[i]][[1]]),data.frame(models_random[[i]][[2]]))
}else{
x2 = data.frame(models_random[[i]])
}
x2$term = paste0("sd(",names(models_random[[i]]),")")
names(x2) = names(x)
x
x2
str(x)
str(x2)
rbind(x,x2)
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
if(length(models_random[[i]])==2){
x2 = rbind(data.frame(models_random[[i]][[1]]),data.frame(models_random[[i]][[2]]))
}else{
x2 = data.frame(models_random[[i]])
}
x2$term = paste0("sd(",names(models_random[[i]]),")")
names(x2) = names(x)
return(rbind(x,x2))
})
unique(models_out$term)
str(models_out)
models_table = plyr::join_all(models_out, type = "left", by = "term")
str(models_table)
models_table$term
models_out = lapply(1:length(models_fixed), function(i) {
x = data.frame(models_fixed[[i]])
names(x) = paste0( names(models_fixed)[[i]], names(x))
x$term = rownames(x)
if(length(models_random[[i]])==2){
x2 = rbind(data.frame(models_random[[i]][[1]]),data.frame(models_random[[i]][[2]]))
}else{
x2 = data.frame(models_random[[i]])
}
x2$term = paste0("sd(",names(models_random[[i]]),")")
names(x2) = names(x)
return(rbind(x,x2))
})
str(models_out)
?join_all
models_table = plyr::join_all(models_out, type = "full", by = "term")
models_table$term
rownames(models_table) = models_table$term
write.csv(models_table,"models_table.csv")
str(models_out)
models_table = plyr::join_all(models_out[c(5,6,3,4,1,2)], type = "full", by = "term")
rownames(models_table) = models_table$term
write.csv(models_table,"models_table.csv")
names(models_table[[3]])
rownames(models_table[[3]])
rownames(models_table[3])
models_loo
models_loo[[1]]
str(models_loo[[1]])
loo_out = lapply(1:length(models_loo), function(i) {
return(data.frame(models_loo[[i]]$elpd_loo,models_loo[[i]]$se_elpd_loo))
})
warnings
warnings()
elpd_loo(models_loo[[1]])
elpd(models_loo[[1]])
data.frame(models_loo[[i]]$estimates$elpd_loo
)
models_loo[[i]]$estimates$elpd_loo
models_loo[[i]]$estimates
models_loo[[i]]$estimates["elpd_loo"]
models_loo[[i]]$estimates["elpd_loo",]
loo_out = lapply(1:length(models_loo), function(i) {
models_loo[[i]]$estimates["elpd_loo",]
})
loo_out
loo_out = lapply(1:length(models_loo), function(i) {
as.data.frame(models_loo[[i]]$estimates["elpd_loo",])
})
loo_out
loo_out = lapply(1:length(models_loo), function(i) {
data.frame(models_loo[[i]]$estimates["elpd_loo",])
})
loo_out
str(loo_out)
loo_out = lapply(1:length(models_loo), function(i) {
rbind(models_loo[[i]]$estimates["elpd_loo",])
})
loo_out
loo_out = lapply(1:length(models_loo), function(i) {
models_loo[[i]]$estimates["elpd_loo",]
})
loo_out
str(loo_out)
loo_out = lapply(1:length(models_loo), function(i) {
x <- models_loo[[i]]$estimates["elpd_loo",]
names(x)  <- paste0( names(models_fixed)[[i]], names(x))
})
loo_out
loo_out = lapply(1:length(models_loo), function(i) {
x <- data.frame(models_loo[[i]]$estimates["elpd_loo",])
names(x)  <- paste0( names(models_fixed)[[i]], names(x))
return(x)
})
loo_out
str(loo_out)
x <- data.frame(models_loo[[i]]$estimates["elpd_loo",])
x
models_loo[[i]]$estimates["elpd_loo",]
data.frame(models_loo[[i]]$estimates["elpd_loo",])
as.data.frame(models_loo[[i]]$estimates["elpd_loo",])
models_loo[[i]]$estimates["elpd_loo",])str()
str(models_loo[[i]]$estimates["elpd_loo",])
as.data.frame(as.matrix(models_loo[[i]]$estimates["elpd_loo",]))
as.data.frame(t(models_loo[[i]]$estimates["elpd_loo",]))
data.frame(t(models_loo[[i]]$estimates["elpd_loo",]))
x <- data.frame(t(models_loo[[i]]$estimates["elpd_loo",]))
rownames(x)  <- paste0( names(models_fixed)[[i]], names(x))
x
paste0( names(models_fixed)[[i]], names(x))
names(models_fixed)[[i]]
loo_out = lapply(1:length(models_loo), function(i) {
x <- data.frame(t(models_loo[[i]]$estimates["elpd_loo",]))
rownames(x)  <- names(models_fixed)[[i]]
return(x)
})
loo_out
models_out
loo_out
rbind(loo_out)
matrix(unlist(loo_out))
matrix(unlist(loo_out),nro=6)
matrix(unlist(loo_out),nrow=6)
matrix(unlist(loo_out),nrow=6,byro=T)
data.frame(matrix(unlist(loo_out),nrow=6,byro=T))
loo_out
rownames(loo_out)
rownames(loo_out[[1]])
sapply(loo_out,rownames)
loo_table = data.frame(matrix(unlist(loo_out),nrow=6,byrow=T))
names(loo_table) <- colnames(loo_out)
rownames(loo_table) <- sapply(loo_out,rownames)
loo_table
loo_table = data.frame(matrix(unlist(loo_out),nrow=6,byrow=T))
names(loo_table) <- colnames(loo_out)
loo_table
colnames(loo_out)
loo_table = data.frame(matrix(unlist(loo_out),nrow=6,byrow=T))
names(loo_table) <- colnames(loo_out[[1]])
rownames(loo_table) <- sapply(loo_out,rownames)
loo_table
write.csv(loo_table,"loo_table.csv")
models_loo
model_summary[[1]]
model_summary
models_summary
str(d)
nrow(d)
length(unique(d$person_ID))
cor(d$speed_limit_mph_ST_3lev,d$prevailing_speed_mph_ST)
?polr
?lasso
?nnet
?glmnetcl
?glmnet
??glmnetcl
